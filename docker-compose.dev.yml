version: '3.8'

services:
  travel-offer-api-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: travel-offer-api-dev
    ports:
      - "3001:3000"  # Используем порт 3001 для разработки
    environment:
      - NODE_ENV=development
      - PORT=3000
      - JWT_SECRET=dev-jwt-secret-key
      - JWT_EXPIRES_IN=24h
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=1000  # Увеличиваем лимит для разработки
      - ALLOWED_ORIGINS=http://localhost:3001,https://your-domain.com
      - LOG_LEVEL=debug
      - ENABLE_DEBUG_MODE=true
      - ENABLE_SWAGGER=true
    volumes:
      - .:/app
      - /app/node_modules  # Изолируем node_modules
      - ./logs:/app/logs
    networks:
      - travel-offer-network
      - existing-network  # Подключаемся к существующей сети
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.travel-offer-api-dev.rule=Host(`api-dev.your-domain.com`)"
      - "traefik.http.routers.travel-offer-api-dev.tls=true"
      - "traefik.http.services.travel-offer-api-dev.loadbalancer.server.port=3000"

  # Redis для кэширования (если нужен)
  redis-dev:
    image: redis:7-alpine
    container_name: travel-offer-api-redis-dev
    ports:
      - "6380:6379"  # Используем порт 6380 для разработки
    volumes:
      - redis_dev_data:/data
    networks:
      - travel-offer-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  redis_dev_data:

networks:
  travel-offer-network:
    driver: bridge
  existing-network:
    external: true  # Подключаемся к существующей сети
    name: your-existing-network-name  # Замените на имя вашей сети 