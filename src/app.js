const express = require('express');
const N8nService = require('./services/n8nService');

const app = express();
const port = process.env.PORT || 3000;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ n8n
const n8nService = new N8nService();

// Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
app.use(express.json());

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
  next();
});

// –ë–∞–∑–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
app.get('/', (req, res) => {
  res.json({
    message: 'Travel Offer API —Ä–∞–±–æ—Ç–∞–µ—Ç!',
    timestamp: new Date().toISOString(),
    environment: process.env.NODE_ENV || 'development'
  });
});

// Health check endpoint
app.get('/api/health', (req, res) => {
  res.json({
    status: 'OK',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    memory: process.memoryUsage(),
    environment: process.env.NODE_ENV
  });
});

// –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è API —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π n8n
app.get('/api/test', async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å n8n
    const n8nHealth = await n8nService.checkHealth();
    
    res.json({
      message: 'API —Ç–µ—Å—Ç–æ–≤—ã–π endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç!',
      data: {
        redis_url: process.env.REDIS_URL || '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
        node_env: process.env.NODE_ENV,
        port: port,
        n8n: {
          config: n8nService.getConfig(),
          health: n8nHealth
        }
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ /api/test:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞',
      message: error.message
    });
  }
});

// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π endpoint –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ webhook
app.post('/api/n8n/test-webhook', async (req, res) => {
  try {
    const data = req.body;
    const webhookPath = '/webhook-test/151c376e-fb7f-4af6-a425-fc0f91f955b3';
    
    console.log('–ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π webhook');
    console.log('–î–∞–Ω–Ω—ã–µ:', data); 

    const result = await n8nService.triggerWebhook(webhookPath, data);
    
    if (result.success) {
      res.json({
        success: true,
        message: '–¢–µ—Å—Ç–æ–≤—ã–π webhook –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
        webhook: webhookPath,
        result: result.data
      });
    } else {
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ webhook',
        message: result.error,
        webhook: webhookPath
      });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ webhook:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ webhook',
      message: error.message
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error('–û—à–∏–±–∫–∞:', err);
  res.status(500).json({
    error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
    message: err.message
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
app.use('*', (req, res) => {
  res.status(404).json({
    error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
    path: req.originalUrl
  });
});



// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(port, '0.0.0.0', () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
  console.log(` Health check: http://localhost:${port}/api/health`);
  console.log(` –¢–µ—Å—Ç–æ–≤—ã–π endpoint: http://localhost:${port}/api/test`);
  console.log(`üîó –¢–µ—Å—Ç–æ–≤—ã–π webhook: POST http://localhost:${port}/api/n8n/test-webhook`);
  console.log(`üîó –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π webhook: POST http://localhost:${port}/api/n8n/webhook/{name}/{id}`);
  console.log(`üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ: ${process.env.NODE_ENV || 'development'}`);
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('–ü–æ–ª—É—á–µ–Ω SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  process.exit(0);
});

process.on('SIGINT', () => {
  console.log('–ü–æ–ª—É—á–µ–Ω SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  process.exit(0);
});