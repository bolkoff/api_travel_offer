const express = require('express');
const N8nService = require('./services/n8nService');
const HtmlAnalyzer = require('./services/htmlAnalyzer');

const app = express();
const port = process.env.PORT || 3000;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
const n8nService = new N8nService();
const htmlAnalyzer = new HtmlAnalyzer();
htmlAnalyzer.setN8nService(n8nService);

// Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
app.use(express.json({ limit: '10mb' })); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö HTML

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
  next();
});

// –ë–∞–∑–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
app.get('/', (req, res) => {
  res.status(404).json({
    message: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
    path: req.originalUrl
  });
});

// Health check endpoint
app.get('/api/health', (req, res) => {
  res.json({
    status: 'OK',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    memory: process.memoryUsage(),
    environment: process.env.NODE_ENV
  });
});

// –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è API —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π n8n
app.get('/api/test', async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å n8n
    const n8nHealth = await n8nService.checkHealth();
    
    res.json({
      message: 'API —Ç–µ—Å—Ç–æ–≤—ã–π endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç!',
      data: {
        redis_url: process.env.REDIS_URL || '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
        node_env: process.env.NODE_ENV,
        port: port,
        n8n: {
          config: n8nService.getConfig(),
          health: n8nHealth
        }
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ /api/test:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞',
      message: error.message
    });
  }
});

// –ê–Ω–∞–ª–∏–∑ HTML —ç–ª–µ–º–µ–Ω—Ç–æ–≤
app.post('/api/analyze', async (req, res) => {
  try {
    const { html_elements, mode } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!html_elements || !Array.isArray(html_elements)) {
      return res.status(400).json({
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö',
        message: 'html_elements –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º'
      });
    }

    if (html_elements.length === 0) {
      return res.status(400).json({
        error: '–ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤',
        message: 'html_elements –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ - —Ç–æ–ª—å–∫–æ content
    for (let i = 0; i < html_elements.length; i++) {
      const element = html_elements[i];
      if (!element.content) {
        return res.status(400).json({
          error: '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞',
          message: `–≠–ª–µ–º–µ–Ω—Ç ${i} –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ content`
        });
      }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ –∞–Ω–∞–ª–∏–∑–∞
    if (mode && !['html', 'markdown'].includes(mode)) {
      return res.status(400).json({
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞',
        message: 'mode –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "html" –∏–ª–∏ "markdown"'
      });
    }

    console.log(`–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ ${html_elements.length} HTML —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
    console.log(`–†–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞: ${mode || 'html'}`);

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
    const analysisResult = await htmlAnalyzer.analyzeHtmlElements(html_elements, { mode });

    res.json({
      success: true,
      message: '–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω',
      ...analysisResult
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ /api/analyze:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ HTML',
      message: error.message
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error('–û—à–∏–±–∫–∞:', err);
  res.status(500).json({
    error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
    message: err.message
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
app.use('*', (req, res) => {
  res.status(404).json({
    error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
    path: req.originalUrl
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(port, '0.0.0.0', () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
  console.log(` Health check: http://localhost:${port}/api/health`);
  console.log(` –¢–µ—Å—Ç–æ–≤—ã–π endpoint: http://localhost:${port}/api/test`);
  console.log(`üîç –ê–Ω–∞–ª–∏–∑ HTML: POST http://localhost:${port}/api/analyze`);
  console.log(`üîó –¢–µ—Å—Ç–æ–≤—ã–π webhook: POST http://localhost:${port}/api/n8n/test-webhook`);
  console.log(` N8N webhooks: http://localhost:${port}/api/n8n/webhooks`);
  console.log(`üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ: ${process.env.NODE_ENV || 'development'}`);
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('–ü–æ–ª—É—á–µ–Ω SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  process.exit(0);
});

process.on('SIGINT', () => {
  console.log('–ü–æ–ª—É—á–µ–Ω SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  process.exit(0);
});