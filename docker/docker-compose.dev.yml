version: "3.8"

services:
  # Travel Offer API сервис
  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile.dev
    container_name: travel-offer-api-dev
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - PORT=3000
      - POSTGRES_URL=postgresql://user:pass_secret@postgres:5432/element_db
      - REDIS_URL=redis://redis:6379
    volumes:
      # Монтируем исходный код для hot-reload
      - ../src:/app/src
      - ../package.json:/app/package.json
      - ../package-lock.json:/app/package-lock.json
      # Логи
      - ../logs:/app/logs
      # Исключаем node_modules из host
      - /app/node_modules
    ports:
      - "3000:3000"
    networks:
      - d_net
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL с Apache AGE расширением
  postgres:
    image: apache/age:release_PG15_1.5.0
    container_name: postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass_secret
      POSTGRES_DB: element_db
    volumes:
      # Используем локальную папку для разработки
      - postgres_data:/var/lib/postgresql/data
      # Инициализационные скрипты (если нужны)
      - ../db/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - d_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d element_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PgAdmin для управления БД
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin-dev
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: vladimir@element.travel
      PGADMIN_DEFAULT_PASSWORD: jOz2!^ZLeY61U5
      # Настройки для разработки
      PGADMIN_CONFIG_WTF_CSRF_ENABLED: 'False'
      PGADMIN_CONFIG_WTF_CSRF_TIME_LIMIT: 'None'
      PGADMIN_CONFIG_SESSION_COOKIE_HTTPONLY: 'True'
      PGADMIN_CONFIG_SESSION_COOKIE_SECURE: 'False'
      PGADMIN_CONFIG_SESSION_COOKIE_SAMESITE: "'Lax'"
      PGADMIN_CONFIG_PERMANENT_SESSION_LIFETIME: '86400'
      PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION: 'False'
      PGADMIN_CONFIG_AUTO_DISCOVERY_ENABLED: 'False'
      PGADMIN_CONFIG_UPGRADE_CHECK_ENABLED: 'False'
      PGADMIN_CONFIG_MAIL_DEBUG: 'False'
      GUNICORN_TIMEOUT: '60'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - d_net
    depends_on:
      - postgres

  # Redis для кэширования
  redis:
    image: redis:7-alpine
    container_name: redis-dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - d_net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Caddy веб-сервер как reverse proxy
  caddy:
    image: caddy:2.7-alpine
    container_name: caddy-dev
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile.dev:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - d_net
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "caddy", "validate", "--config", "/etc/caddy/Caddyfile"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  redis_data:
    driver: local
  caddy_data:
    driver: local
  caddy_config:
    driver: local

networks:
  d_net:
    driver: bridge
    name: d_net